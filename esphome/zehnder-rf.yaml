# Load external components
# https://esphome.io/components/external_components.html#external-components-git
external_components:
  - source:
      type: git
      url: https://github.com/DevSecNinja/ESPHome-Zehnder-RF.git
      ref: main
    refresh: 0s # Always check for updates on the Git repository
    components: [ nrf905, zehnder ]

substitutions:
  hostname: zehnder-comfofan
  device_name: Zehnder ComfoFan
  device_id: zehnder_comfofan

esphome:
  name: ${hostname}
  comment: "Zehnder ComfoFan"
  project:
    name: "ESPHome.Zehnder"
    version: "Zehnder ComfoFan"

  on_boot:
    priority: -100
    then:
      - lambda: !secret zehnder_config # ${device_id}_ventilation->set_config(<Fan networkId>, <Fan my device type>, <Fan my device id>, <Fan main_unit type>, <Fan main unit id>); # You can obtain this from ${device_id}_ventilation->dump_config()
      - lambda: ${device_id}_ventilation->dump_config();

esp8266:
  board: nodemcuv2
  restore_from_flash: false

preferences:
  flash_write_interval: 1d

# SPI
spi:
  clk_pin:  D5 # GPIO14 - This should be sck since clk doesn't show any messages
  mosi_pin: D7 # GPIO13
  miso_pin: D6 # GPIO12

# nRF905 config
nrf905:
  id: "nrf905_rf"
  cs_pin:   D8 # GPIO15
  cd_pin:   D1 # GPIO5
  ce_pin:   D2 # GPIO4
  pwr_pin:  D3 # GPIO0
  txen_pin: D0 # GPIO16

  # We don't need AM and DR at the moment as they are read from the internal registers
  # Also, the NodeMCU V2 ESP8266 doesn't have enough pins. Using dummy data

# Enable logging
logger:
  level: DEBUG
  # level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret utility_bridge_api_encryption_key
  services:
    - service: set_speed
      variables:
        run_speed: int
        run_time: int
      then:
        - lambda: |-
            id(${device_id}_ventilation).setSpeed(run_speed, run_time);
    - service: set_mode
      variables:
        mode: string
      # The reason we have all these lambda statements is to initialize the sensor values at startup
      # Without this, the sensors will stay unavailable in Home Assistant until a mode is set via this device.
      then:
        - lambda: |-
            if (mode == "Auto") {
              id(${device_id}_ventilation).setSpeed(0, 0);
            } else if (mode == "Low") {
              id(${device_id}_ventilation).setSpeed(1, 0);
            } else if (mode == "Medium") {
              id(${device_id}_ventilation).setSpeed(2, 0);
            } else if (mode == "High") {
              id(${device_id}_ventilation).setSpeed(3, 0);
            } else if (mode == "Max_10m") {
              id(${device_id}_ventilation).setSpeed(4, 10);
            } else if (mode == "Max_30m") {
              id(${device_id}_ventilation).setSpeed(4, 30);
            } else if (mode == "Max_60m") {
              id(${device_id}_ventilation).setSpeed(4, 60);
            } else {
              ESP_LOGW("zehnder", "Unknown mode %s", mode);
            }

ota: 
  - password: !secret utility_bridge_ota_password
    platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Could result in unreliable WiFi connection
  # I personally haven't experienced this
  power_save_mode: HIGH
  fast_connect: true
  domain: ".IOT-INTERNAL"
  # When you are changing an IP address, it seems that !secret doesn't work
  # and you have to hardcode it here...
  use_address: !secret utility_bridge_ip_address

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret utility_bridge_ap_ssid
    password: !secret utility_bridge_ap_password

web_server:
  port: 80
  local: true
  version: 2
  auth:
    username: admin
    password: !secret web_password

captive_portal:

time:
  - platform: sntp
    timezone: Europe/Amsterdam
    servers:
      - "pool.ntp.org"

light:
  - platform: status_led
    name: "${device_name} Status LED"
    id: "${device_id}_status_led"
    internal: true
    pin:
      number: GPIO2
      inverted: true

binary_sensor:
  - platform: template
    name: "${device_name} Timer"
    id: "${device_id}_timer"
    icon: mdi:fan-clock
    lambda: !lambda 'return ${device_id}_ventilation->timer;'

  - platform: status
    id: ${device_id}_esphome_status
    name: ${device_name} Status

sensor:
  - platform: wifi_signal
    name: "${device_name} RSSI"
    update_interval: 60s

  - platform: uptime
    name: "${device_name} Uptime"

  - platform: adc
    pin: VCC
    name: "${device_name} Power Supply"

  - platform: template
    name: "${device_name} Ventilation Percentage"
    id: "${device_id}_ventilation_percentage"
    state_class: measurement
    unit_of_measurement: '%'
    icon: mdi:percent
    accuracy_decimals: 0
    update_interval: 15s
    lambda: !lambda 'return ${device_id}_ventilation->voltage;'

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${device_name} IP Address"
    ssid:
      name: "${device_name} SSID"
    bssid:
      name: "${device_name} BSSID"
    mac_address:
      name: "${device_name} MAC"

  - platform: template
    name: "${device_name} Ventilation Mode"
    id: "${device_id}_ventilation_mode"
    update_interval: 15s
    icon: mdi:information
    lambda: !lambda 'switch (${device_id}_ventilation->speed) {
                     case 1: return std::string("Low");
                     case 2: return std::string("Medium");
                     case 3: return std::string("High");
                     case 4: return std::string("Max");
                     default: return std::string("Auto");
                 }'

  - platform: version
    id: ${device_id}_esphome_version
    name: ${device_name} Version

switch:
  - platform: safe_mode
    name: "${device_name} Restart (Safe Mode)"
  - platform: restart
    name: "${device_name} Restart"

button:
  - platform: template
    id: ${device_id}_auto
    name: ${device_name} Auto
    icon: mdi:fan-auto
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(0, 0);
  - platform: template
    id: ${device_id}_low
    name: ${device_name} Low
    icon: mdi:fan-speed-1
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(1, 0);
  - platform: template
    id: ${device_id}_medium
    name: ${device_name} Medium
    icon: mdi:fan-speed-2
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(2, 0);
  - platform: template
    id: ${device_id}_high
    name: ${device_name} High
    icon: mdi:fan-speed-3
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(3, 0);
  - platform: template
    id: ${device_id}_max_10
    name: ${device_name} Max 10
    icon: mdi:fast-forward-10
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(4, 10);
  - platform: template
    id: ${device_id}_max_30
    name: ${device_name} Max 30
    icon: mdi:fast-forward-30
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(4, 30);
  - platform: template
    id: ${device_id}_max_60
    name: ${device_name} Max 60
    icon: mdi:fast-forward-60
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(4, 60);

  - platform: template
    id: ${device_id}_esphome_dump_config
    name: ${device_name} Dump Config
    entity_category: config
    on_press:
      then:
        lambda: |-
          id(${device_id}_ventilation).dump_config();

  - platform: template
    id: ${device_id}_esphome_set_config
    name: ${device_name} Set Config
    entity_category: config
    on_press:
      then:
        lambda: !secret zehnder_config
    
  - platform: template
    id: ${device_id}_high_30
    name: ${device_name} TEST High 30
    on_press:
      then:
        lambda: |-
          ${device_id}_ventilation->setSpeed(3, 30);

  - platform: template
    id: ${device_id}_esphome_setup
    name: ${device_name} Setup
    entity_category: config
    on_press:
      then:
        lambda: |-
          id(${device_id}_ventilation).setup();

# The FAN controller
fan:
  - platform: zehnder
    id: ${device_id}_ventilation
    name: "${device_name} Ventilation"
    nrf905: nrf905_rf
    update_interval: "15s"
    on_speed_set:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - sensor.template.publish:
          id: ${device_id}_ventilation_percentage
          state: !lambda 'return ${device_id}_ventilation->voltage;'
      - binary_sensor.template.publish:
          id: ${device_id}_timer
          state: !lambda 'return ${device_id}_ventilation->timer;'
      - text_sensor.template.publish:
          id: ${device_id}_ventilation_mode
          state: !lambda 'switch (${device_id}_ventilation->speed) {
                             case 1: return "Low";
                             case 2: return "Medium";
                             case 3: return "High";
                             case 4: return "Max";
                             default: return "Auto";
                         }'
