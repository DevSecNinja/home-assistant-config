---
name: "Validate Configuration"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  yaml-lint:
    name: "YAML Linting"
    runs-on: "ubuntu-24.04"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4"
        
      - name: "Set up Python"
        uses: "actions/setup-python@v5"
        with:
          python-version: "3.12"
          
      - name: "Install yamllint"
        run: |
          python -m pip install --upgrade pip
          pip install yamllint
          
      - name: "Run yamllint"
        run: |
          yamllint --version
          yamllint .

# hassfest validation is not applicable for configuration repositories
  # It's designed for validating custom integrations, not Home Assistant configurations

  esphome-check:
    name: "ESPHome Configuration Validation"
    runs-on: "ubuntu-24.04"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4"
        
      - name: "Check for ESPHome configurations"
        id: check_esphome
        run: |
          if ls esphome/*.yaml 1> /dev/null 2>&1; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "ESPHome configuration files found"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "No ESPHome configuration files found"
          fi
      
      - name: "Create ESPHome secrets files"
        if: steps.check_esphome.outputs.found == 'true'
        run: |
          # Create ESPHome secrets files with dummy values for validation
          mkdir -p esphome/common
          
          # Create esphome/secrets.yaml
          cat > esphome/secrets.yaml << 'EOF'
          # ESPHome secrets for validation - DO NOT USE IN PRODUCTION
          wifi_iot_internal_ssid: "dummy_wifi"
          wifi_iot_internal_password: "dummy_password"
          wifi_ap_password: "dummy_ap_password"
          esphome_ota_password: "dummy_ota_password"
          esphome_api_encryption_key: "dummy_key_1234567890123456789012345678901234567890123456="
          esphome_web_server_password: "dummy_web_password"
          zehnder_config: "// dummy config"
          EOF
          
          # Create esphome/common/secrets.yaml
          cat > esphome/common/secrets.yaml << 'EOF'
          # ESPHome common secrets for validation - DO NOT USE IN PRODUCTION
          wifi_iot_internal_ssid: "dummy_wifi"
          wifi_iot_internal_password: "dummy_password"
          wifi_ap_password: "dummy_ap_password"
          esphome_ota_password: "dummy_ota_password"
          esphome_api_encryption_key: "dummy_key_1234567890123456789012345678901234567890123456="
          esphome_web_server_password: "dummy_web_password"
          zehnder_config: "// dummy config"
          EOF
        
      - name: "Set up Python"
        if: steps.check_esphome.outputs.found == 'true'
        uses: "actions/setup-python@v5"
        with:
          python-version: "3.12"
          
      - name: "Install ESPHome"
        if: steps.check_esphome.outputs.found == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install esphome
          
      - name: "Validate ESPHome configurations"
        if: steps.check_esphome.outputs.found == 'true'
        run: |
          echo "Checking ESPHome configurations..."
          for config in esphome/*.yaml; do
            if [[ -f "$config" ]]; then
              echo "Validating $config"
              esphome config "$config"
            fi
          done

  home-assistant-check:
    name: "Home Assistant Configuration Check"
    runs-on: "ubuntu-24.04"
    continue-on-error: true  # Don't fail the entire workflow if HA config has issues
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4"
        
      - name: "Create secrets file with common secrets"
        run: |
          # Create a comprehensive dummy secrets.yaml for validation
          # This includes common secrets found in Home Assistant configurations
          cat > secrets.yaml << 'EOF'
          # Dummy secrets for validation - DO NOT USE IN PRODUCTION
          
          # Basic Home Assistant secrets
          api_password: dummy_password
          http_base_url: http://localhost:8123
          latitude: 52.3676
          longitude: 4.9041
          elevation: 0
          time_zone: Europe/Amsterdam
          
          # Database and InfluxDB secrets
          db_url: sqlite:///home-assistant_v2.db
          influxdb_host: localhost
          influxdb_port: 8086
          influxdb_database: homeassistant
          influxdb_username: dummy_user
          influxdb_password: dummy_password
          influxdb_homeassistant_host: localhost
          
          # MQTT secrets
          mqtt_host: localhost
          mqtt_port: 1883
          mqtt_username: dummy_user
          mqtt_password: dummy_password
          
          # Network and device secrets
          router_host: 192.168.1.1
          router_username: admin
          router_password: dummy_password
          
          # Notification secrets
          telegram_api_key: dummy_key
          telegram_chat_id: 123456789
          
          # External API keys
          openweather_api_key: dummy_key
          google_api_key: dummy_key
          
          # Device secrets
          device_tracker_secret: dummy_secret
          alarm_code: "1234"
          
          # Add commonly used secrets
          admin_password: dummy_password
          guest_password: dummy_password
          api_key: dummy_api_key
          access_token: dummy_token
          client_id: dummy_client_id
          client_secret: dummy_client_secret
          
          # Add missing influxdb secret
          influxdb_homeassistant_port: 8086
          EOF
          
      - name: "Run Home Assistant config check"
        run: |
          # Use docker to run Home Assistant config check in a controlled environment
          docker run --rm \
            -v "$PWD":/config \
            -w /config \
            homeassistant/home-assistant:stable \
            python -m homeassistant --config /config --script check_config --info all || {
              echo "⚠️  Home Assistant configuration check found issues."
              echo "This may be due to missing secrets or integrations that require specific hardware/services."
              echo "Please review the output above for specific errors."
              echo ""
              echo "Common solutions:"
              echo "1. Add missing secrets to a real secrets.yaml file"
              echo "2. Ensure custom integrations are properly configured"
              echo "3. Check that all referenced entities exist"
              echo ""
              echo "Note: Some errors are expected in CI environment due to missing hardware/services."
              exit 1
            }
        env:
          # Suppress warnings for missing integrations in CI
          PYTHONPATH: /usr/src/homeassistant

  markdown-lint:
    name: "Markdown Linting"
    runs-on: "ubuntu-24.04"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4"
        
      - name: "Install markdownlint"
        run: npm install -g markdownlint-cli2
        
      - name: "Run markdownlint (excluding auto-generated files)"
        run: |
          # Check if there are any markdown files to lint (excluding auto-generated files)
          if find . -name "*.md" -not -name "README.md" | head -1 | grep -q .; then
            markdownlint-cli2 "**/*.md" --ignore README.md
          else
            echo "No markdown files to lint (excluding auto-generated README.md)"
          fi

  validation-summary:
    name: "Validation Summary"
    runs-on: "ubuntu-24.04"
    needs: [yaml-lint, esphome-check, home-assistant-check, markdown-lint]
    if: always()
    steps:
      - name: "Check validation results"
        run: |
          echo "## Validation Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job result
          if [[ "${{ needs.yaml-lint.result }}" == "success" ]]; then
            echo "✅ YAML Linting: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ YAML Linting: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.esphome-check.result }}" == "success" ]] || [[ "${{ needs.esphome-check.result }}" == "skipped" ]]; then
            echo "✅ ESPHome validation: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ ESPHome validation: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.home-assistant-check.result }}" == "success" ]]; then
            echo "✅ Home Assistant config check: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.home-assistant-check.result }}" == "failure" ]]; then
            echo "⚠️  Home Assistant config check: Failed (may include expected CI limitations)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Home Assistant config check: Error" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.markdown-lint.result }}" == "success" ]]; then
            echo "✅ Markdown linting: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Markdown linting: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall result - Home Assistant check failure is not blocking due to expected CI limitations
          if [[ "${{ needs.yaml-lint.result }}" == "success" ]] && \
             ([[ "${{ needs.esphome-check.result }}" == "success" ]] || [[ "${{ needs.esphome-check.result }}" == "skipped" ]]) && \
             [[ "${{ needs.markdown-lint.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Core validations passed successfully!**" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.home-assistant-check.result }}" != "success" ]]; then
              echo "ℹ️  Note: Home Assistant config check had issues, which may be expected in CI environment." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Some core validations failed. Please check the logs above.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi